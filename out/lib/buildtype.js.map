{"version":3,"sources":["../../src/lib/buildtype.js"],"names":["BuildType","baseUrl","name","password","_buildTypesUrl","_baseUrl","args","uri","_createBuildTypesUrl","project","_post","_createRequestJson","all","_createParameterRequests","request","locator","projectName","projectId","template","id","requests","parameters","forEach","parameter","buildTypeId","push","_put","value"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;;;;;;;;;;;IAEqBA,S;;;AAEnB;;;AAGA,qBAAaC,OAAb,EAAsBC,IAAtB,EAA4BC,QAA5B,EAAsC;AAAA;;AAAA,sHAC9BF,OAD8B,EACrBC,IADqB,EACfC,QADe;;AAEpC,UAAKC,cAAL,GAAyB,MAAKC,QAA9B;AAFoC;AAGrC;;AAED;;;;;;;;;;4EAKWC,I;;;;;;kIACe,EAAEC,KAAQ,KAAKC,oBAAL,CAA0BF,KAAKG,OAA/B,CAAR,aAAuDH,KAAKJ,IAA9D,E;;;;;;;;;;;;;;;;;;;;AAG1B;;;;;;;;;;;8EAOcI,I;;;;;;uBACC,KAAKI,KAAL,CAAW,EAAEH,KAAK,KAAKH,cAAZ,EAAX,EAAyC,KAAKO,kBAAL,CAAwBL,IAAxB,CAAzC,C;;;;;;;;;;;;;;;;;;;;AAGf;;;;;;;;;;8EAMqBA,I;;;;;;uBACN,mBAAQM,GAAR,CAAY,KAAKC,wBAAL,CAA8BP,IAA9B,CAAZ,C;;;;;;;;;;;;;;;;;;;;;yCAGOG,O,EAAS;AAC7B,aAAU,KAAKJ,QAAf,uBAAyCI,OAAzC;AACD;;;uCAEmBH,I,EAAM;AACxB,UAAIQ,UAAU;AACZZ,cAAMI,KAAKJ;AADC,OAAd;;AAIAY,cAAQL,OAAR,GAAkB;AAChBM,iBAAST,KAAKU,WAAL,aACWV,KAAKU,WADhB,WAESV,KAAKW;AAHP,OAAlB;;AAMA,UAAIX,KAAKY,QAAT,EAAmB;AACjBJ,gBAAQI,QAAR,GAAmB;AACjBC,cAAIb,KAAKY;AADQ,SAAnB;AAGD;;AAED,aAAOJ,OAAP;AACD;;;;8EAE+BR,I;;;;;;;;AAC1Bc,wB,GAAW,E;;AACfd,qBAAKe,UAAL,CAAgBC,OAAhB,CAAwB,UAACC,SAAD,EAAe;AACrC,sBAAIhB,MAAS,OAAKH,cAAd,WAAkCE,KAAKkB,WAAvC,oBAAiED,UAAUrB,IAA/E;AACAkB,2BAASK,IAAT,CAAc,OAAKC,IAAL,CAAU,EAACnB,KAAKA,GAAN,EAAV,EAAsB,EAAEoB,OAAOJ,UAAUI,KAAnB,EAAtB,CAAd;AACD,iBAHD;kDAIOP,Q;;;;;;;;;;;;;;;;;;;;;kBAtEUpB,S","file":"buildtype.js","sourcesContent":["import Client from './client';\nimport Promise from 'bluebird';\n\nexport default class BuildType extends Client {\n\n  /**\n   * @constructor\n   */\n  constructor (baseUrl, name, password) {\n    super(baseUrl, name, password);\n    this._buildTypesUrl = `${this._baseUrl}/buildTypes/`;\n  }\n\n  /**\n   * Get the buildType that matches the name provided\n   * @param {string} args.name - the name of the buildType to look for\n   * @param {string} args.project - the name of the parent project for the buildType\n   */\n  async get (args) {\n    return await super._get({ uri: `${this._createBuildTypesUrl(args.project)}name:${args.name}` });\n  }\n\n  /**\n   * Create the request to send to teamcity\n   * @param {string} args.name - the name of the buildType to create\n   * @param {string} args.projectId - the name of the project the buildType will belong to\n   * @param {string} args.projectName - the name of the project to place the buildtype in\n   * @param {string} args.template - the id of the template to use for the buildType\n   */\n  async create (args) {\n    return await this._post({ uri: this._buildTypesUrl }, this._createRequestJson(args));\n  }\n\n  /**\n   * create the parameters on the specified build type\n   * @param {string} args.buildTypeId - the id of the build type of create the parameters on\n   * @param {array} args.parameters - the object setting the value of the paramters by name\n   *                                   {name: name1, value: value1}\n   */\n  async addParameters (args) {\n    return await Promise.all(this._createParameterRequests(args));\n  }\n\n  _createBuildTypesUrl (project) {\n    return `${this._baseUrl}/projects/name:${project}/buildTypes/`;\n  }\n\n  _createRequestJson (args) {\n    var request = {\n      name: args.name\n    };\n\n    request.project = {\n      locator: args.projectName\n                ? `name:${args.projectName}`\n                : `id:${args.projectId}`\n    };\n\n    if (args.template) {\n      request.template = {\n        id: args.template\n      };\n    }\n\n    return request;\n  }\n\n  async _createParameterRequests (args) {\n    let requests = [];\n    args.parameters.forEach((parameter) => {\n      let uri = `${this._buildTypesUrl}id:${args.buildTypeId}/parameters/${parameter.name}`;\n      requests.push(this._put({uri: uri}, { value: parameter.value }));\n    });\n    return requests;\n  }\n}\n"]}