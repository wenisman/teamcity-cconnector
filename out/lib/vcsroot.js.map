{"version":3,"sources":["../../src/lib/vcsroot.js"],"names":["VcsRoot","baseUrl","name","password","_baseUrl","args","uri","options","_createRequestJson","get","vcsRootName","vcsRoot","isNothing","newProperties","properties","existingProperties","differenceWith","x","y","concat","_put","property","request","projectLocator","projectName","projectId","value","url","vcsName","vcsType","branch","push"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;;;;;;;;;;;IAEqBA,O;;;AAEnB;;;AAGA,mBAAaC,OAAb,EAAsBC,IAAtB,EAA4BC,QAA5B,EAAsC;AAAA;;AAAA,kHAC9BF,OAD8B,EACrBC,IADqB,EACfC,QADe;;AAEpC,UAAKC,QAAL,GAAmB,MAAKA,QAAxB;AAFoC;AAGrC;;AAED;;;;;;;;;4EAIWC,I;;;;;;8HACe,EAAEC,KAAQ,KAAKF,QAAb,aAA6BC,KAAKH,IAApC,E;;;;;;;;;;;;;;;;;;;;AAG1B;;;;;;;;;;;;;8EAScK,O;;;;;;+HACa,EAAED,KAAK,KAAKF,QAAZ,E,EAAwB,KAAKI,kBAAL,CAAwBD,OAAxB,C;;;;;;;;;;;;;;;;;;;;;;8EAGrCF,I;;;;;;iIACe,EAAEC,KAAQ,KAAKF,QAAb,aAA6BC,KAAKH,IAApC,E;;;;;;;;;;;;;;;;;;;;AAG7B;;;;;;;;;8EAKqBG,I;;;;;;;uBACG,KAAKI,GAAL,CAAS,EAAEP,MAAMG,KAAKK,WAAb,EAAT,C;;;AAAhBC,uB;;oBAEDA,QAAQC,S;;;;;AACLC,6B,GAAgBR,KAAKS,U;AACrBC,kC,GAAqB,gBAAEC,cAAF,CAAiB,UAACC,CAAD,EAAIC,CAAJ,EAAU;AAAED,oBAAEf,IAAF,KAAWgB,EAAEhB,IAAb;AAAoB,iBAAjD,EAAmDS,QAAQF,GAAR,GAAcK,UAAjE,EAA6ED,aAA7E,C;AACrBC,0B,GAAaC,mBAAmBI,MAAnB,CAA0BN,aAA1B,C;;uBAEN,KAAKO,IAAL,CAAU,EAACd,KAAQ,KAAKF,QAAb,aAA6BC,KAAKK,WAAlC,gBAAD,EAAV,EAAwE,EAAEW,UAAUP,UAAZ,EAAxE,C;;;;;;;;;;;;;;;;;;;;;uCAIGT,I,EAAM;AACxB,UAAIiB,UAAU;AACZpB,cAAMG,KAAKH,IADC;AAEZqB,wBAAgBlB,KAAKmB,WAAL,aACUnB,KAAKmB,WADf,WAEQnB,KAAKoB,SAJjB;AAKZX,oBAAY;AACVO,oBAAU,CACR,EAAEnB,MAAM,KAAR,EAAewB,OAAOrB,KAAKsB,GAA3B,EADQ;AADA,SALA;AAUZC,iBAASvB,KAAKwB;AAVF,OAAd;;AAaA,UAAIxB,KAAKyB,MAAT,EAAiB;AACfR,gBAAQR,UAAR,CAAmBO,QAAnB,CAA4BU,IAA5B,CAAiC,EAAE7B,MAAM,QAAR,EAAkBwB,OAAOrB,KAAKyB,MAA9B,EAAjC;AACD;;AAED,aAAOR,OAAP;AACD;;;;;;kBAvEkBtB,O","file":"vcsroot.js","sourcesContent":["import Client from './client';\nimport R from 'ramda';\n\nexport default class VcsRoot extends Client {\n\n  /**\n   * @constructor\n   */\n  constructor (baseUrl, name, password) {\n    super(baseUrl, name, password);\n    this._baseUrl = `${this._baseUrl}/vcs-roots/`;\n  }\n\n  /**\n   * Get the vcs root that matches the name provided\n   * @param {string} args.name - the name of the vcs root to look for\n   */\n  async get (args) {\n    return await super._get({ uri: `${this._baseUrl}name:${args.name}` });\n  }\n\n  /**\n   * Create the request to send to teamcity\n   * @param {string} options.name - (Required) the name of the Vcs Root to create\n   * @param {string} options.projectName - the name of the project the VcsRoot will belong to\n   * @param {string} options.projectId - the name of the project the VcsRoot will belong to\n   * @param {string} options.url - (Required) the url to the repository to use for the vcs root\n   * @param {string} options.branch - the main branch to use for the repository\n   * @param {string} options.vcsType - (Required) the type of vcs connector to use [jetbrains.get|perforce|svn|tfs]\n   */\n  async create (options) {\n    return await super._post({ uri: this._baseUrl }, this._createRequestJson(options));\n  }\n\n  async delete (args) {\n    return await super._delete({ uri: `${this._baseUrl}name:${args.name}` });\n  }\n\n  /**\n   * @param {string} args.vcsRootName - the name of the vcsroot\n   * @param {array} args.properties - (Required) the object defining the properties to be set\n   *                                  [{name: name1, value: value1}]\n   */\n  async addProperties (args) {\n    const vcsRoot = await this.get({ name: args.vcsRootName });\n\n    if (!vcsRoot.isNothing) {\n      const newProperties = args.properties;\n      const existingProperties = R.differenceWith((x, y) => { x.name === y.name; }, vcsRoot.get().properties, newProperties);\n      const properties = existingProperties.concat(newProperties);\n\n      return await this._put({uri: `${this._baseUrl}name:${args.vcsRootName}/properties`}, { property: properties });\n    }\n  }\n\n  _createRequestJson (args) {\n    var request = {\n      name: args.name,\n      projectLocator: args.projectName\n                      ? `name:${args.projectName}`\n                      : `id:${args.projectId}`,\n      properties: {\n        property: [\n          { name: 'url', value: args.url }\n        ]\n      },\n      vcsName: args.vcsType\n    };\n\n    if (args.branch) {\n      request.properties.property.push({ name: 'branch', value: args.branch });\n    }\n\n    return request;\n  }\n}\n"]}