{"version":3,"sources":["../../../src/lib/buildtype.js"],"names":["BuildType","baseUrl","name","password","_buildTypesUrl","_baseUrl","args","uri","_createBuildTypesUrl","project","_post","_createRequestJson","template","request","id"],"mappings":";;;;;;;;;;AAAA;;;;;;;;;;;;;;IAEqBA,S;;;AAEnB;;;AAGA,qBAAaC,OAAb,EAAsBC,IAAtB,EAA4BC,QAA5B,EAAsC;AAAA;;AAAA,sHAC9BF,OAD8B,EACrBC,IADqB,EACfC,QADe;;AAEpC,UAAKC,cAAL,GAAyB,MAAKC,QAA9B;AAFoC;AAGrC;;AAED;;;;;;;;;;4EAKWC,I;;;;;;kIACe,EAAEC,KAAQ,KAAKC,oBAAL,CAA0BF,KAAKG,OAA/B,CAAR,aAAuDH,KAAKJ,IAA9D,E;;;;;;;;;;;;;;;;;;;;AAG1B;;;;;;;;;;8EAMcI,I;;;;;;uBACC,KAAKI,KAAL,CAAW,EAAEH,KAAK,KAAKC,oBAAL,CAA0BF,KAAKG,OAA/B,CAAP,EAAX,EAA6D,KAAKE,kBAAL,CAAwB,EAACT,MAAMI,KAAKJ,IAAZ,EAAkBU,UAAUN,KAAKM,QAAjC,EAAxB,CAA7D,C;;;;;;;;;;;;;;;;;;;;;yCAGOH,O,EAAS;AAC7B,aAAU,KAAKJ,QAAf,uBAAyCI,OAAzC;AACD;;;uCAEmBH,I,EAAM;AACxB,UAAIO,UAAU;AACZX,cAAMI,KAAKJ;AADC,OAAd;;AAIA,UAAII,KAAKM,QAAT,EAAmB;AACjBC,gBAAQD,QAAR,GAAmB;AACjBE,cAAIR,KAAKM;AADQ,SAAnB;AAGD;;AAED,aAAOC,OAAP;AACD;;;;;;kBA7CkBb,S","file":"buildtype.js","sourcesContent":["import Client from './client';\n\nexport default class BuildType extends Client {\n\n  /**\n   * @constructor\n   */\n  constructor (baseUrl, name, password) {\n    super(baseUrl, name, password);\n    this._buildTypesUrl = `${this._baseUrl}/buildTypes/`;\n  }\n\n  /**\n   * Get the buildType that matches the name provided\n   * @param {string} args.name - the name of the buildType to look for\n   * @param {string} args.project - the name of the parent project for the buildType\n   */\n  async get (args) {\n    return await super._get({ uri: `${this._createBuildTypesUrl(args.project)}name:${args.name}` });\n  }\n\n  /**\n   * Create the request to send to teamcity\n   * @param {string} args.name - the name of the buildType to create\n   * @param {string} args.project - the name of the project the buildType will belong to\n   * @param {string} args.template - the id of the template to use for the buildType\n   */\n  async create (args) {\n    return await this._post({ uri: this._createBuildTypesUrl(args.project) }, this._createRequestJson({name: args.name, template: args.template}));\n  }\n\n  _createBuildTypesUrl (project) {\n    return `${this._baseUrl}/projects/name:${project}/buildTypes/`;\n  }\n\n  _createRequestJson (args) {\n    var request = {\n      name: args.name\n    };\n\n    if (args.template) {\n      request.template = {\n        id: args.template\n      };\n    }\n\n    return request;\n  }\n}\n"]}