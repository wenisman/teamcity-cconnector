{"version":3,"sources":["../../../src/lib/project.js"],"names":["Project","baseurl","username","password","_baseUrl","args","uri","name","_post","_createRequestJson","data","_put","projJson","parent","parentProject","locator"],"mappings":";;;;;;;;;;AAAA;;;;;;;;;;;;;;IAEqBA,O;;;AAEnB;;;AAGA,mBAAaC,OAAb,EAAsBC,QAAtB,EAAgCC,QAAhC,EAA0C;AAAA;;AAAA,kHAClCF,OADkC,EACzBC,QADyB,EACfC,QADe;;AAExC,UAAKC,QAAL,GAAmB,MAAKA,QAAxB;AAFwC;AAGzC;;AAED;;;;;;;;;4EAIWC,I;;;;;;8HACe,EAAEC,KAAQ,KAAKF,QAAb,aAA6BC,KAAKE,IAApC,E;;;;;;;;;;;;;;;;;;;;AAG1B;;;;;;;;;8EAKcF,I;;;;;;uBACC,KAAKG,KAAL,CAAW,EAAEF,KAAK,KAAKF,QAAZ,EAAX,EAAmC,KAAKK,kBAAL,CAAwBJ,IAAxB,CAAnC,C;;;;;;;;;;;;;;;;;;;;AAGf;;;;;;;;8EAIcK,I;;;;;;uBACC,KAAKC,IAAL,CAAU,EAAEL,KAAK,KAAKF,QAAZ,EAAV,EAAkCM,IAAlC,C;;;;;;;;;;;;;;;;;;;;AAGf;;;;;;;;8EAIcL,I;;;;;;iIACe,EAAEC,KAAQ,KAAKF,QAAb,aAA6BC,KAAKE,IAApC,E;;;;;;;;;;;;;;;;;;;;;uCAGTF,I,EAAM;AACxB,UAAIO,WAAW,EAAEL,MAAMF,KAAKE,IAAb,EAAf;;AAEA,UAAIF,KAAKQ,MAAT,EAAiB;AACfD,iBAASE,aAAT,GAAyB;AACvBC,6BAAiBV,KAAKQ;AADC,SAAzB;AAGD;;AAED,aAAOD,QAAP;AACD;;;;;;kBArDkBZ,O;AAsDpB","file":"project.js","sourcesContent":["import Client from './client';\n\nexport default class Project extends Client {\n\n  /**\n   * @constructor\n   */\n  constructor (baseurl, username, password) {\n    super(baseurl, username, password);\n    this._baseUrl = `${this._baseUrl}/projects/`;\n  }\n\n  /**\n   * Get the project that matches the name provided\n   * @param {string} name - the name of the project\n   */\n  async get (args) {\n    return await super._get({ uri: `${this._baseUrl}name:${args.name}` });\n  }\n\n  /**\n   * Create a basic project with the name provided\n   * @param {string} args.name - the name of the project to create\n   * @param {string} args.parent - the name of the parent that this project belongs to\n   */\n  async create (args) {\n    return await this._post({ uri: this._baseUrl }, this._createRequestJson(args));\n  }\n\n  /**\n   * Update the project with the provided data\n   * @param {project} data - the full data object required to build a project\n   */\n  async update (data) {\n    return await this._put({ uri: this._baseUrl }, data);\n  }\n\n  /**\n   * Delete the project with the provided name\n   * @param {string} name - the name of the project to delete\n   */\n  async delete (args) {\n    return await super._delete({ uri: `${this._baseUrl}name:${args.name}` });\n  }\n\n  _createRequestJson (args) {\n    var projJson = { name: args.name };\n\n    if (args.parent) {\n      projJson.parentProject = {\n        locator: `name:${args.parent}`\n      };\n    }\n\n    return projJson;\n  }\n};\n"]}