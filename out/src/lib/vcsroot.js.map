{"version":3,"sources":["../../../src/lib/vcsroot.js"],"names":["VcsRoot","baseUrl","name","password","_baseUrl","options","post","uri","_createRequestJson","args","request","projectLocator","projectName","encodeURI","projectId","properties","property","vcsName","vcsType","url","push","value","branch"],"mappings":";;;;;;;;;;AAAA;;;;;;;;;;;;;;IAEqBA,O;;;AACnB,mBAAaC,OAAb,EAAsBC,IAAtB,EAA4BC,QAA5B,EAAsC;AAAA;;AAAA,kHAC9BF,OAD8B,EACrBC,IADqB,EACfC,QADe;;AAEpC,UAAKC,QAAL,GAAmB,MAAKA,QAAxB;AAFoC;AAGrC;;AAED;;;;;;;;;4EAIWF,I;;;;;uJACW,KAAKE,Q,aAAgBF,I;;;;;;;;;;;;;;;;;AAG3C;;;;;;;;;;;;;8EAScG,O;;;;;kDACL,KAAKC,IAAL,CAAU,EAAEC,KAAK,KAAKH,QAAZ,EAAV,EAAkC,KAAKI,kBAAL,CAAwBH,OAAxB,CAAlC,C;;;;;;;;;;;;;;;;;;uCAGWI,I,EAAM;AACxB,UAAIC,UAAU;AACZR,cAAMO,KAAKP,IADC;AAEZS,wBAAgBF,KAAKG,WAAL,GACEC,oBAAkBJ,KAAKG,WAAvB,CADF,GAEEC,kBAAgBJ,KAAKK,SAArB,CAJN;AAKZC,oBAAY;AACVC,oBAAU;AADA,SALA;AAQZC,iBAASR,KAAKS;AARF,OAAd;;AAWA,UAAIT,KAAKU,GAAT,EAAc;AACZT,gBAAQK,UAAR,CAAmBC,QAAnB,CAA4BI,IAA5B,CAAiC,EAAElB,MAAM,KAAR,EAAemB,OAAOZ,KAAKU,GAA3B,EAAjC;AACD;;AAED,UAAIV,KAAKa,MAAT,EAAiB;AACfZ,gBAAQK,UAAR,CAAmBC,QAAnB,CAA4BI,IAA5B,CAAiC,EAAElB,MAAM,QAAR,EAAkBmB,OAAOZ,KAAKa,MAA9B,EAAjC;AACD;;AAED,aAAOZ,OAAP;AACD;;;;;;kBAhDkBV,O","file":"vcsroot.js","sourcesContent":["import Client from './client';\n\nexport default class VcsRoot extends Client {\n  constructor (baseUrl, name, password) {\n    super(baseUrl, name, password);\n    this._baseUrl = `${this._baseUrl}/vcs-roots`;\n  }\n\n  /**\n   * Get the vcs root that matches the name provided\n   * @param {string} name - the name of the vcs root to look for\n   */\n  async get (name) {\n    return super.get(`${this._baseUrl}name:${name}`);\n  }\n\n  /**\n   * Create the request to send to teamcity\n   * @param {string} options.name - (Required) the name of the Vcs Root to create\n   * @param {string} options.projectName - the name of the project the VcsRoot will belong to\n   * @param {string} options.projectId - the name of the project the VcsRoot will belong to\n   * @param {string} options.url - (Required) the url to the repository to use for the vcs root\n   * @param {string} options.branch - the main branch to use for the repository\n   * @param {string} options.vcsType - (Required) the type of vcs connector to use [jetbrains.get|perforce|svn|tfs]\n   */\n  async create (options) {\n    return this.post({ uri: this._baseUrl }, this._createRequestJson(options));\n  }\n\n  _createRequestJson (args) {\n    var request = {\n      name: args.name,\n      projectLocator: args.projectName\n                      ? encodeURI(`name:${args.projectName}`)\n                      : encodeURI(`id:${args.projectId}`),\n      properties: {\n        property: [ ]\n      },\n      vcsName: args.vcsType\n    };\n\n    if (args.url) {\n      request.properties.property.push({ name: 'url', value: args.url });\n    }\n\n    if (args.branch) {\n      request.properties.property.push({ name: 'branch', value: args.branch });\n    }\n\n    return request;\n  }\n}\n"]}