{"version":3,"sources":["../../../src/lib/vcsroot.js"],"names":["VcsRoot","baseUrl","name","password","_baseUrl","args","uri","options","_createRequestJson","request","projectLocator","projectName","projectId","properties","property","value","url","vcsName","vcsType","branch","push"],"mappings":";;;;;;;;;;AAAA;;;;;;;;;;;;;;IAEqBA,O;;;AAEnB;;;AAGA,mBAAaC,OAAb,EAAsBC,IAAtB,EAA4BC,QAA5B,EAAsC;AAAA;;AAAA,kHAC9BF,OAD8B,EACrBC,IADqB,EACfC,QADe;;AAEpC,UAAKC,QAAL,GAAmB,MAAKA,QAAxB;AAFoC;AAGrC;;AAED;;;;;;;;;4EAIWC,I;;;;;;8HACe,EAAEC,KAAQ,KAAKF,QAAb,aAA6BC,KAAKH,IAApC,E;;;;;;;;;;;;;;;;;;;;AAG1B;;;;;;;;;;;;;8EAScK,O;;;;;;+HACa,EAAED,KAAK,KAAKF,QAAZ,E,EAAwB,KAAKI,kBAAL,CAAwBD,OAAxB,C;;;;;;;;;;;;;;;;;;;;;;8EAGrCF,I;;;;;;iIACe,EAAEC,KAAQ,KAAKF,QAAb,aAA6BC,KAAKH,IAApC,E;;;;;;;;;;;;;;;;;;;;;uCAGTG,I,EAAM;AACxB,UAAII,UAAU;AACZP,cAAMG,KAAKH,IADC;AAEZQ,wBAAgBL,KAAKM,WAAL,aACUN,KAAKM,WADf,WAEQN,KAAKO,SAJjB;AAKZC,oBAAY;AACVC,oBAAU,CACR,EAAEZ,MAAM,KAAR,EAAea,OAAOV,KAAKW,GAA3B,EADQ;AADA,SALA;AAUZC,iBAASZ,KAAKa;AAVF,OAAd;;AAaA,UAAIb,KAAKc,MAAT,EAAiB;AACfV,gBAAQI,UAAR,CAAmBC,QAAnB,CAA4BM,IAA5B,CAAiC,EAAElB,MAAM,QAAR,EAAkBa,OAAOV,KAAKc,MAA9B,EAAjC;AACD;;AAED,aAAOV,OAAP;AACD;;;;;;kBAtDkBT,O","file":"vcsroot.js","sourcesContent":["import Client from './client';\n\nexport default class VcsRoot extends Client {\n\n  /**\n   * @constructor\n   */\n  constructor (baseUrl, name, password) {\n    super(baseUrl, name, password);\n    this._baseUrl = `${this._baseUrl}/vcs-roots/`;\n  }\n\n  /**\n   * Get the vcs root that matches the name provided\n   * @param {string} args.name - the name of the vcs root to look for\n   */\n  async get (args) {\n    return await super._get({ uri: `${this._baseUrl}name:${args.name}` });\n  }\n\n  /**\n   * Create the request to send to teamcity\n   * @param {string} options.name - (Required) the name of the Vcs Root to create\n   * @param {string} options.projectName - the name of the project the VcsRoot will belong to\n   * @param {string} options.projectId - the name of the project the VcsRoot will belong to\n   * @param {string} options.url - (Required) the url to the repository to use for the vcs root\n   * @param {string} options.branch - the main branch to use for the repository\n   * @param {string} options.vcsType - (Required) the type of vcs connector to use [jetbrains.get|perforce|svn|tfs]\n   */\n  async create (options) {\n    return await super._post({ uri: this._baseUrl }, this._createRequestJson(options));\n  }\n\n  async delete (args) {\n    return await super._delete({ uri: `${this._baseUrl}name:${args.name}` });\n  }\n\n  _createRequestJson (args) {\n    var request = {\n      name: args.name,\n      projectLocator: args.projectName\n                      ? `name:${args.projectName}`\n                      : `id:${args.projectId}`,\n      properties: {\n        property: [\n          { name: 'url', value: args.url }\n        ]\n      },\n      vcsName: args.vcsType\n    };\n\n    if (args.branch) {\n      request.properties.property.push({ name: 'branch', value: args.branch });\n    }\n\n    return request;\n  }\n}\n"]}