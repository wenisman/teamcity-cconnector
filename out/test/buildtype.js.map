{"version":3,"sources":["../../test/buildtype.js"],"names":["describe","only","bt","proj","before","beforeEach","get","name","existing","isNothing","create","parent","afterEach","it","project","build","console","log","getOrElse","projectId","template","output"],"mappings":";;AAAA;;;;AACA;;;;;;;;AAEAA,SAASC,IAAT,CAAc,iBAAd,EAAiC,YAAM;AACrC,MAAIC,WAAJ;AAAA,MAAQC,aAAR;;AAEAC,mDAAO;AAAA;AAAA;AAAA;AAAA;AACLD,mBAAO,sBAAY,uBAAZ,EAAqC,SAArC,EAAgD,SAAhD,CAAP;AACAD,iBAAK,wBAAc,uBAAd,EAAuC,SAAvC,EAAkD,SAAlD,CAAL;;AAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;;AAKAG,uDAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACcF,KAAKG,GAAL,CAAS,EAACC,MAAM,QAAP,EAAT,CADd;;AAAA;AACHC,oBADG;;AAAA,iBAELA,SAASC,SAFJ;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAGDN,KAAKO,MAAL,CAAY,EAACH,MAAM,QAAP,EAAZ,CAHC;;AAAA;AAAA;AAAA,mBAIDJ,KAAKO,MAAL,CAAY,EAACH,MAAM,OAAP,EAAgBI,QAAQ,QAAxB,EAAZ,CAJC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAX;;AAQAC,YAAU,yBAAV,4CAAqC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAArC;;AAIAC,KAAG,2BAAH,4CAAgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACVX,GAAGI,GAAH,CAAO,EAACC,MAAM,YAAP,EAAqBO,SAAS,OAA9B,EAAP,CADU;;AAAA;AACxBC,iBADwB;;AAE9BC,oBAAQC,GAAR,CAAY,OAAZ,EAAqBF,MAAMG,SAAN,CAAgB,SAAhB,CAArB;;AAF8B,iBAG1BH,MAAMN,SAHoB;AAAA;AAAA;AAAA;;AAI5BO,oBAAQC,GAAR,CAAY,oBAAZ;AAJ4B;AAAA,mBAKPf,GAAGQ,MAAH,CAAU,EAACH,MAAM,YAAP,EAAqBY,WAAW,cAAhC,EAAgDC,UAAU,0BAA1D,EAAV,CALO;;AAAA;AAKtBC,kBALsB;;AAM5BL,oBAAQC,GAAR,CAAYI,MAAZ;;AAN4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAhC;AASD,CA7BD","file":"buildtype.js","sourcesContent":["import BuildType from '../src/lib/buildtype';\nimport Project from '../src/lib/project';\n\ndescribe.only('buildType tests', () => {\n  let bt, proj;\n\n  before(async () => {\n    proj = new Project('http://localhost:8111', 'testusr', 'testpwd');\n    bt = new BuildType('http://localhost:8111', 'testusr', 'testpwd');\n  });\n\n  beforeEach(async () => {\n    const existing = await proj.get({name: 'Parent'});\n    if (existing.isNothing) {\n      await proj.create({name: 'Parent'});\n      await proj.create({name: 'Child', parent: 'Parent'});\n    }\n  });\n\n  afterEach('should delete a project', async () => {\n    //await proj.delete({name: 'Parent'});\n  });\n\n  it('should create a buildType', async () => {\n    const build = await bt.get({name: 'test build', project: 'Child'});\n    console.log('build', build.getOrElse('nothing'));\n    if (build.isNothing) {\n      console.log('creating buld type');\n      const output = await bt.create({name: 'test build', projectId: 'Parent_Child', template: 'Default_DotNet_BuildTest'});\n      console.log(output);\n    }\n  });\n});\n"]}