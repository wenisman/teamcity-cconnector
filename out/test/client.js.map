{"version":3,"sources":["../../test/client.js"],"names":["describe","client","request","spy","assert","beforeEach","stub","Client","get","default","it","before","throws","status","_get","uri","then","result","fail","catch","e","threw","statusCode","getOrElse","should","be","true"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;AAEAA,SAAS,mBAAT,EAA8B,YAAM;AAClC,MAAIC,eAAJ;AAAA,MAAYC,gBAAZ;AAAA,MAAqBC,YAArB;AACA,MAAIC,SAAS,eAAKA,MAAlB;AACAC,aAAW,YAAM;AACfH,cAAU,gBAAMI,IAAN,EAAV;AACAH,UAAM,gBAAMA,GAAN,CAAUD,OAAV,CAAN;;AAEA,QAAMK,SAAS,0BAAW,mBAAX,EAAgC;AAC7C,yBAAmB;AACjBC,aAAKN,OADY;AAEjB,uBAAe;AAFE;AAD0B,KAAhC,EAKZO,OALH;;AAOAR,aAAS,IAAIM,MAAJ,CAAW,4BAAX,EAAyC,SAAzC,EAAoD,SAApD,CAAT;AACD,GAZD;;AAcAG,KAAG,4BAAH,4CAAiC;AAAA;AAAA;AAAA;AAAA;AAC/BC,mBAAO,YAAM;AACXT,sBAAQU,MAAR,CAAe,EAAEC,QAAQ,GAAV,EAAf;AACD,aAFD;;AAD+B;AAAA,mBAKzBZ,OACHa,IADG,CACE,EAAEC,KAAK,GAAP,EADF,EAEHC,IAFG,CAEE,UAACC,MAAD,EAAY;AAChBb,qBAAOc,IAAP,CAAY,IAAZ,EAAkB,IAAlB,EAAwB,8BAAxB;AACD,aAJG,EAKHC,KALG,CAKG,UAACC,CAAD,EAAO;AACZ;AACAjB,kBAAIkB,KAAJ;AACD,aARG,CALyB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjC;;AAgBAX,KAAG,0CAAH,4CAA+C;AAAA;AAAA;AAAA;AAAA;AAC7CC,mBAAO,YAAM;AACXT,sBAAQU,MAAR,CAAe,EAAEU,YAAY,GAAd,EAAf;AACD,aAFD;;AAIArB,mBACGa,IADH,CACQ,EAAEC,KAAK,WAAP,EADR,EAEGC,IAFH,CAEQ,UAACC,MAAD,EAAY;AAChBA,qBAAOM,SAAP,CAAiB,IAAjB,EAAuBC,MAAvB,CAA8BC,EAA9B,CAAiCC,IAAjC;AACD,aAJH;;AAL6C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA/C;AAWD,CA5CD","file":"client.js","sourcesContent":["import proxyquire from 'proxyquire';\nimport sinon from 'sinon';\nimport chai from 'chai';\nimport maybe from 'data.maybe';\n\ndescribe('base client tests', () => {\n  let client, request, spy;\n  let assert = chai.assert;\n  beforeEach(() => {\n    request = sinon.stub();\n    spy = sinon.spy(request);\n\n    const Client = proxyquire('../src/lib/client', {\n      'request-promise': {\n        get: request,\n        '@noCallThru': true\n      }\n    }).default;\n\n    client = new Client('http://192.168.99.100:8111', 'testusr', 'testpwd');\n  });\n\n  it('should fail on invalid uri', async () => {\n    before(() => {\n      request.throws({ status: 400 });\n    });\n\n    await client\n      ._get({ uri: 'a' })\n      .then((result) => {\n        assert.fail(null, null, 'no result should be returned');\n      })\n      .catch((e) => {\n        // noop\n        spy.threw();\n      });\n  });\n\n  it('should return nothing when url not found', async () => {\n    before(() => {\n      request.throws({ statusCode: 404 });\n    });\n\n    client\n      ._get({ uri: 'something' })\n      .then((result) => {\n        result.getOrElse(true).should.be.true;\n      });\n  });\n});\n"]}